using AutoFixture;
using Microsoft.Extensions.Logging;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Newtonsoft.Json;
using PublisherFunctionApp;
using PublisherFunctionApp.Model;
using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.IO;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace PublisherFunctionAppUnitTestProject
{
    [TestClass]
    [ExcludeFromCodeCoverage]
    public class UnitTest
    {

        [TestMethod]
        public async Task PDFFileToThumbnailImageConverter()
        {
            string docpath = Directory.GetParent(System.Environment.CurrentDirectory).Parent.FullName + @"\Files\AHFC.pdf";
            var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.FILE_EXTENSION, Constants.PDF);
            requestMessage.Headers.Add(Constants.WIDTH, Constants.WIDTH_VALUE);
            requestMessage.Headers.Add(Constants.HEIGHT, Constants.HEIGHT_VALUE);
            requestMessage.Headers.Add(Constants.FILE_TYPE, "png");
            FileStream fileStream = File.OpenRead(docpath);
            requestMessage.Content = new StreamContent(fileStream);
            var result = await ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            Assert.IsTrue("OK" == result.StatusCode.ToString());
        }

        [TestMethod]

        public async Task ImageFileToThumbnailImageConverter()
        {
            var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.FILE_EXTENSION, Constants.PNG);
            requestMessage.Headers.Add(Constants.THUMBNAIL_HEIGHT, Constants.HEIGHT_VALUE);
            requestMessage.Headers.Add(Constants.INLINE_HEIGHT, Constants.HEIGHT_VALUE);
            requestMessage.Headers.Add(Constants.THUMBNAIL_WIDTH, Constants.WIDTH_VALUE);
            requestMessage.Headers.Add(Constants.INLINE_WIDTH, Constants.WIDTH_VALUE);
            requestMessage.Headers.Add(Constants.FILE_TYPE, Constants.PNG);
            var myStr = "";
            requestMessage.Content = new StringContent(myStr);
            HttpResponseMessage result = await ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            Assert.IsTrue("OK" == result.StatusCode.ToString());

        }
        [TestMethod]
        public async Task HeaderException_FileExtension()
        {
            string docpath = Directory.GetParent(System.Environment.CurrentDirectory).Parent.FullName + @"\Files\AHFC.pdf";
            var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.HEIGHT, Constants.PDF);
            requestMessage.Headers.Add(Constants.WIDTH, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.FILE_TYPE, new Fixture().Create<string>());
            FileStream fileStream = File.OpenRead(docpath);
            requestMessage.Content = new StreamContent(fileStream);
            var result = await PublisherFunctionApp.ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            HttpContent httpContent = result.Content;
            string Errormessage = httpContent.ReadAsStringAsync().Result;
            Assert.IsTrue("The given header FileExtension was not found." == Errormessage);
        }

        [TestMethod]
        public async Task HeaderException_Height()
        {
            string docpath = Directory.GetParent(System.Environment.CurrentDirectory).Parent.FullName + @"\Files\AHFC.pdf"; var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.FILE_EXTENSION, Constants.PDF);
            requestMessage.Headers.Add(Constants.WIDTH, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.FILE_TYPE, new Fixture().Create<string>());
            FileStream fileStream = File.OpenRead(docpath);
            requestMessage.Content = new StreamContent(fileStream);
            var result = await PublisherFunctionApp.ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            HttpContent httpContent = result.Content;
            string Errormessage = httpContent.ReadAsStringAsync().Result;
            Assert.IsTrue("The given header Height was not found." == Errormessage);

        }

        [TestMethod]
        public async Task HeaderException_Width()
        {
            string docpath = Directory.GetParent(System.Environment.CurrentDirectory).Parent.FullName + @"\Files\AHFC.pdf"; var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.FILE_EXTENSION, Constants.PDF);
            requestMessage.Headers.Add(Constants.HEIGHT, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.FILE_TYPE, new Fixture().Create<string>());
            FileStream fileStream = File.OpenRead(docpath);
            requestMessage.Content = new StreamContent(fileStream);
            var result = await PublisherFunctionApp.ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            HttpContent httpContent = result.Content;
            string Errormessage = httpContent.ReadAsStringAsync().Result;
            Assert.IsTrue("The given header Width was not found." == Errormessage);

        }

        [TestMethod]
        public async Task HeaderException_FileType()
        {

            string docpath = Directory.GetParent(System.Environment.CurrentDirectory).Parent.FullName + @"\Files\AHFC.pdf";
            var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.FILE_EXTENSION, Constants.PDF);
            requestMessage.Headers.Add(Constants.HEIGHT, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.WIDTH, new Fixture().Create<string>());
            FileStream fileStream = File.OpenRead(docpath);
            requestMessage.Content = new StreamContent(fileStream);
            var result = await PublisherFunctionApp.ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            HttpContent httpContent = result.Content;
            string Errormessage = httpContent.ReadAsStringAsync().Result;
            Assert.IsTrue("The given header FileType was not found." == Errormessage);

        }

        [TestMethod]
        public async Task HeaderException_ThumbnailHeight()
        {
            var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.FILE_EXTENSION, Constants.PNG);
            requestMessage.Headers.Add(Constants.INLINE_HEIGHT, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.THUMBNAIL_WIDTH, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.INLINE_WIDTH, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.FILE_TYPE, new Fixture().Create<string>());
            requestMessage.Content = new StringContent(string.Empty);
            HttpResponseMessage result = await ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            HttpContent httpContent = result.Content;
            string Errormessage = httpContent.ReadAsStringAsync().Result;
            Assert.IsTrue("The given header ThumnailImageHeight was not found." == Errormessage);
        }


        [TestMethod]
        public async Task HeaderException_InlineHeight()
        {

            var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.FILE_EXTENSION, Constants.PNG);
            requestMessage.Headers.Add(Constants.THUMBNAIL_HEIGHT, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.THUMBNAIL_WIDTH, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.INLINE_WIDTH, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.FILE_TYPE, new Fixture().Create<string>());
            requestMessage.Content = new StringContent(string.Empty);
            HttpResponseMessage result = await ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            HttpContent httpContent = result.Content;
            string Errormessage = httpContent.ReadAsStringAsync().Result;
            Assert.IsTrue("The given header InlineImageHeight was not found." == Errormessage);
        }

        [TestMethod]
        public async Task HeaderException_ThumbnailWidth()
        {
            var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.FILE_EXTENSION, Constants.PNG);
            requestMessage.Headers.Add(Constants.THUMBNAIL_HEIGHT, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.INLINE_HEIGHT, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.INLINE_WIDTH, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.FILE_TYPE, new Fixture().Create<string>());
            requestMessage.Content = new StringContent(string.Empty);
            HttpResponseMessage result = await ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            HttpContent httpContent = result.Content;
            string Errormessage = httpContent.ReadAsStringAsync().Result;
            Assert.IsTrue("The given header ThumbnailWidth was not found." == Errormessage);
        }


        [TestMethod]
        public async Task HeaderException_InlineWidth()
        {

            var requestMessage = new HttpRequestMessage();
            requestMessage.Headers.Add(Constants.FILE_EXTENSION, Constants.PNG);
            requestMessage.Headers.Add(Constants.THUMBNAIL_HEIGHT, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.THUMBNAIL_WIDTH, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.INLINE_HEIGHT, new Fixture().Create<string>());
            requestMessage.Headers.Add(Constants.FILE_TYPE, new Fixture().Create<string>());
            requestMessage.Content = new StringContent(string.Empty);
            HttpResponseMessage result = await ImageConverterFunction.Run(requestMessage, new Mock<ILogger>().Object);
            HttpContent httpContent = result.Content;
            string Errormessage = httpContent.ReadAsStringAsync().Result;
            Assert.IsTrue("The given header InlineWidth was not found." == Errormessage);
        }
       
    }
}
